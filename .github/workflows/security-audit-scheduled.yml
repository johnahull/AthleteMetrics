name: Weekly Security Audit

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual trigger

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Run security audit
        id: security-audit
        run: ./scripts/security-audit.sh

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 90

      - name: Create issue on failure
        if: failure() && steps.security-audit.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Handle potential missing or malformed audit-results.json
            let auditResults;
            try {
              auditResults = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            } catch (err) {
              console.error('❌ Failed to read audit results:', err.message);
              console.error('This indicates the security audit script failed before generating results');
              // Create minimal structure for issue creation
              auditResults = {
                metadata: {
                  vulnerabilities: { critical: 0, high: 0, moderate: 0 }
                }
              };
            }

            const critical = auditResults.metadata.vulnerabilities.critical || 0;
            const high = auditResults.metadata.vulnerabilities.high || 0;
            const moderate = auditResults.metadata.vulnerabilities.moderate || 0;

            const title = `🚨 Security Audit Failed: ${critical} critical, ${high} high vulnerabilities`;
            const body = `## Weekly Security Audit Failed

            **Date:** ${new Date().toISOString().split('T')[0]}
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            ### Vulnerability Summary
            - 🔴 Critical: ${critical}
            - 🟠 High: ${high}
            - 🟡 Moderate: ${moderate}

            ### Action Required
            1. Review the [audit results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Run \`npm audit fix\` to apply automatic fixes
            3. For vulnerabilities without automatic fixes, review and update dependencies manually
            4. Verify fixes with \`npm audit --audit-level=high\`

            ### Commands
            \`\`\`bash
            # Apply automatic fixes
            npm audit fix

            # Force update (may introduce breaking changes)
            npm audit fix --force

            # Check remaining vulnerabilities
            npm audit --audit-level=high
            \`\`\`
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,automated'
            });

            const existingIssue = issues.data.find(issue =>
              issue.title.includes('Security Audit Failed')
            );

            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## Updated Security Audit Results\n\n${body}`
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'automated', 'high-priority']
              });
            }
