name: PR Checks

on:
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Run type check
        run: npm run check

  tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          NODE_OPTIONS: --max-old-space-size=4096
          SESSION_SECRET: test-secret-key-for-ci

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: athletemetrics_test
          POSTGRES_MAX_CONNECTIONS: 100
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Generate test credentials
        run: |
          # Generate cryptographically secure random password for each test run
          # Ensures password is never stored in git history or visible in logs
          TEST_PASS="$(openssl rand -base64 12)Aa1!"
          echo "ADMIN_PASSWORD=${TEST_PASS}" >> "$GITHUB_ENV"
          echo "‚úÖ Generated secure test credentials"

      - name: Run database migrations
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/athletemetrics_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/athletemetrics_test
          SESSION_SECRET: test-secret-key-for-ci
          ADMIN_USER: admin
          ADMIN_EMAIL: admin@test.com
          ADMIN_PASSWORD: ${{ env.ADMIN_PASSWORD }}

  build:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi
          echo "Build verification successful"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Run security audit
        run: |
          # Run audit and capture output
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check for vulnerabilities
          CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          MODERATE_COUNT=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)

          echo "üìä Security Audit Results:"
          echo "  Critical: $CRITICAL_COUNT"
          echo "  High: $HIGH_COUNT"
          echo "  Moderate: $MODERATE_COUNT"

          # Fail on critical or high vulnerabilities
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "‚ùå Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity vulnerabilities"
            npm audit --audit-level=high
            exit 1
          fi

          if [ "$MODERATE_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $MODERATE_COUNT moderate severity vulnerabilities"
            echo "Consider updating dependencies, but not blocking PR"
          fi

          echo "‚úÖ No high or critical vulnerabilities found"

  workflow-lint:
    name: Workflow Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run actionlint
        uses: raven-actions/actionlint@v1
        with:
          fail-on-error: true
