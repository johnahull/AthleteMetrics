name: Deploy to Production

on:
  release:
    types: [published]

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  test-and-deploy:
    name: Test and Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: write
      issues: write
      pull-requests: write

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: athletemetrics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Run TypeScript type check
        run: npm run check

      - name: Generate test credentials
        run: |
          TEST_PASS="$(openssl rand -base64 12)Aa1!"
          echo "ADMIN_PASSWORD=${TEST_PASS}" >> "$GITHUB_ENV"
          echo "‚úÖ Generated secure test credentials"

      - name: Setup test database schema
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/athletemetrics_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/athletemetrics_test
          SESSION_SECRET: test-secret-key-for-ci
          ADMIN_USER: admin
          ADMIN_EMAIL: admin@test.com
          ADMIN_PASSWORD: ${{ env.ADMIN_PASSWORD }}

      - name: Run security audit
        run: |
          # Run audit and capture output
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check for vulnerabilities
          CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          MODERATE_COUNT=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)

          echo "üìä Security Audit Results:"
          echo "  Critical: $CRITICAL_COUNT"
          echo "  High: $HIGH_COUNT"
          echo "  Moderate: $MODERATE_COUNT"

          # Fail on critical or high vulnerabilities
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "‚ùå Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity vulnerabilities"
            npm audit --audit-level=high
            exit 1
          fi

          if [ "$MODERATE_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $MODERATE_COUNT moderate severity vulnerabilities"
            echo "Consider updating dependencies, but not blocking deployment"
          fi

          echo "‚úÖ No high or critical vulnerabilities found"

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi
          echo "‚úÖ Build verification successful"

      - name: Backup production database
        run: node scripts/backup-database.js
        env:
          USE_RAILWAY_BACKUPS: true
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}
          BACKUP_RETENTION_DAYS: 30

      - name: Deploy to Railway Production
        id: deploy
        run: |
          echo "üöÄ Deploying to Railway Production..."
          npm install -g @railway/cli

          # Capture current deployment ID for potential rollback (BEFORE deploying)
          CURRENT_DEPLOYMENT=$(railway deployments list --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} --json | jq -r '.data[0].id' || echo "")
          echo "current_deployment_id=$CURRENT_DEPLOYMENT" >> "$GITHUB_OUTPUT"
          echo "üìù Current deployment (pre-deploy): $CURRENT_DEPLOYMENT"

          # Deploy the application first (this creates NEW deployment)
          railway up --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} --environment production --detach

          echo "‚úÖ Deployment initiated"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}

      - name: Wait for Railway deployment
        run: node scripts/wait-for-deployment.js
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}
          DEPLOYMENT_POLL_INTERVAL: 5
          DEPLOYMENT_TIMEOUT: 300

      - name: Run health check
        id: health-check
        run: node scripts/health-check.js
        env:
          HEALTH_CHECK_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TIMEOUT: 60000
          HEALTH_CHECK_RETRIES: 5
        continue-on-error: true

      - name: Run database migrations
        if: steps.health-check.outcome == 'success'
        run: |
          echo "üîÑ Running database migrations after successful health check..."
          railway run --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} npm run db:push
          echo "‚úÖ Migrations completed"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}

      - name: Run smoke tests
        id: smoke-tests
        if: steps.health-check.outcome == 'success'
        run: node scripts/smoke-tests.js
        env:
          BASE_URL: ${{ secrets.PRODUCTION_URL }}
        continue-on-error: true

      - name: Automated rollback on failure
        if: steps.health-check.outcome == 'failure' || steps.smoke-tests.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è Health check or smoke tests failed!"
          echo "üîÑ Initiating automated rollback..."

          PREVIOUS_DEPLOYMENT="${{ steps.deploy.outputs.current_deployment_id }}"

          if [ -n "$PREVIOUS_DEPLOYMENT" ] && [ "$PREVIOUS_DEPLOYMENT" != "null" ]; then
            echo "üìù Rolling back to deployment: $PREVIOUS_DEPLOYMENT"

            # Attempt rollback using Railway CLI v3+
            # Railway CLI v3 doesn't have a dedicated rollback command
            # Use 'railway redeploy' to redeploy a previous deployment
            railway redeploy --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} "$PREVIOUS_DEPLOYMENT" || {
              echo "‚ùå Automated rollback failed!"
              echo "üîß Manual intervention required."
              echo "Railway Dashboard: https://railway.app/project/${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}"
              exit 1
            }

            echo "‚úÖ Rollback completed successfully"
            echo "‚è≥ Waiting for rollback to stabilize..."
            sleep 15

            # Verify rollback health
            echo "üîç Verifying rollback health..."
            node scripts/health-check.js || {
              echo "‚ö†Ô∏è Rollback health check failed - manual verification required"
              echo "Railway Dashboard: https://railway.app/project/${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}"
              exit 1
            }

            echo "‚úÖ Rollback verified - service is healthy"
          else
            echo "‚ö†Ô∏è No previous deployment found - cannot rollback automatically"
            echo "üîß Manual intervention required."
            echo "Railway Dashboard: https://railway.app/project/${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}"
          fi

          exit 1
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          HEALTH_CHECK_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TIMEOUT: 30000
          HEALTH_CHECK_RETRIES: 3

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"
          echo "Deployment completed at: $(date)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "Check the logs above for details."
          exit 1

      - name: Post deployment comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const release = context.payload.release;
            const healthCheck = '${{ steps.health-check.outcome }}';
            const smokeTests = '${{ steps.smoke-tests.outcome }}';
            const rollbackAttempted = (healthCheck === 'failure' || smokeTests === 'failure');

            let body = `## üöÄ Production Deployment ${status === 'success' ? '‚úÖ' : '‚ùå'}\n\n`;
            body += `**Release:** ${release.tag_name}\n`;
            body += `**URL:** ${{ secrets.PRODUCTION_URL }}\n`;
            body += `**Health Check:** ${healthCheck === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n`;
            body += `**Smoke Tests:** ${smokeTests === 'success' ? '‚úÖ Passed' : smokeTests === 'skipped' ? '‚è≠Ô∏è Skipped' : '‚ùå Failed'}\n`;
            body += `**Final Status:** ${status}\n`;

            if (rollbackAttempted) {
              body += `\n### üîÑ Automated Rollback\n`;
              body += `Deployment health checks failed. Automated rollback was initiated.\n`;
              body += `Previous deployment was restored to maintain service stability.\n`;
              body += `\n**Action Required:** Investigate failure and retry deployment.\n`;
            } else if (status !== 'success') {
              body += `\n‚ö†Ô∏è Deployment failed before health checks. No rollback performed.\n`;
              body += `Check Railway dashboard: https://railway.app/project/${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}\n`;
            } else {
              body += `\n‚úÖ Deployment completed successfully with all checks passing.\n`;
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
