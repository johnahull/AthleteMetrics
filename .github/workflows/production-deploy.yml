name: Deploy to Production

on:
  release:
    types: [published]

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  test-and-deploy:
    name: Test and Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type check
        run: npm run check
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Setup test database schema
        run: npm run db:push
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Run session table migration for tests
        run: |
          echo "Running session table migration on test database..."
          psql "$DATABASE_URL" -f scripts/migrate-session-table.sql
          echo "‚úÖ Session table migration completed"
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          SESSION_SECRET: ${{ secrets.PRODUCTION_SESSION_SECRET }}
          ADMIN_USER: ${{ secrets.PRODUCTION_ADMIN_USER }}
          ADMIN_EMAIL: ${{ secrets.PRODUCTION_ADMIN_EMAIL }}
          ADMIN_PASSWORD: ${{ secrets.PRODUCTION_ADMIN_PASSWORD }}
          STAGING_ADMIN_USER: ${{ secrets.PRODUCTION_ADMIN_USER }}
          STAGING_ADMIN_EMAIL: ${{ secrets.PRODUCTION_ADMIN_EMAIL }}
          STAGING_ADMIN_PASSWORD: ${{ secrets.PRODUCTION_ADMIN_PASSWORD }}

      - name: Run security audit
        id: audit
        run: |
          # Run audit and capture output
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check for HIGH or CRITICAL vulnerabilities
          HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          MODERATE_COUNT=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)

          echo "Critical: $CRITICAL_COUNT"
          echo "High: $HIGH_COUNT"
          echo "Moderate: $MODERATE_COUNT"

          # Fail production deploy if HIGH or CRITICAL vulnerabilities found
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "‚ùå BLOCKING PRODUCTION DEPLOY: Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity vulnerabilities"
            npm audit --audit-level=high
            exit 1
          fi

          # Warn about moderate vulnerabilities but don't fail
          if [ "$MODERATE_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $MODERATE_COUNT moderate severity vulnerabilities"
            echo "Consider updating dependencies in next release"
          fi

          echo "‚úÖ No high or critical vulnerabilities found"

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi
          echo "‚úÖ Build verification successful"

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Backup production database
        run: node scripts/backup-database.js
        env:
          USE_RAILWAY_BACKUPS: true
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}
          BACKUP_RETENTION_DAYS: 30

      - name: Run database migrations
        run: railway run --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} npm run db:push
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Run session table migration (idempotent)
        run: |
          echo "Running session table migration..."
          psql "$PRODUCTION_DATABASE_URL" -f scripts/migrate-session-table.sql
          echo "‚úÖ Session table migration completed"
        env:
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_PUBLIC_DATABASE_URL }}

      - name: Deploy to Railway Production
        id: deploy
        run: |
          SERVICE_ID="${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}"
          if [ -z "$SERVICE_ID" ]; then
            echo "Error: RAILWAY_PRODUCTION_SERVICE_ID is not set"
            exit 1
          fi
          echo "üöÄ Deploying to Railway Production..."
          # Use --detach to actually deploy (CI mode only builds without deploying)
          railway up --service "$SERVICE_ID" --detach
          echo "‚úÖ Railway deployment initiated successfully"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      - name: Wait for deployment
        run: sleep 45

      - name: Run health check
        id: health-check
        run: node scripts/health-check.js
        env:
          HEALTH_CHECK_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TIMEOUT: 60000
          HEALTH_CHECK_RETRIES: 5
        continue-on-error: true

      - name: Run smoke tests
        id: smoke-tests
        if: steps.health-check.outcome == 'success'
        run: node scripts/smoke-tests.js
        env:
          BASE_URL: ${{ secrets.PRODUCTION_URL }}
        continue-on-error: true

      - name: Alert on failure
        if: steps.health-check.outcome == 'failure' || steps.smoke-tests.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è Health check or smoke tests failed!"
          echo "‚ùå Manual intervention required. Please check Railway dashboard and rollback if needed."
          echo "Railway Dashboard: https://railway.app/project/${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}"
          exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"
          echo "Deployment completed at: $(date)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "Check the logs above for details."
          exit 1

      - name: Post deployment comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const release = context.payload.release;
            const healthCheck = '${{ steps.health-check.outcome }}';
            const smokeTests = '${{ steps.smoke-tests.outcome }}';

            let body = `## üöÄ Production Deployment ${status === 'success' ? '‚úÖ' : '‚ùå'}\n\n`;
            body += `**Release:** ${release.tag_name}\n`;
            body += `**URL:** ${{ secrets.PRODUCTION_URL }}\n`;
            body += `**Health Check:** ${healthCheck === 'success' ? '‚úÖ' : '‚ùå'}\n`;
            body += `**Smoke Tests:** ${smokeTests === 'success' ? '‚úÖ' : '‚ùå'}\n`;
            body += `**Status:** ${status}\n`;

            if (status !== 'success') {
              body += `\n‚ö†Ô∏è Deployment failed. Check Railway dashboard for manual rollback if needed.`;
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
