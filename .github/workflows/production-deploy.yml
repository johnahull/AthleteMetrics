name: Deploy to Production

on:
  release:
    types: [published]

concurrency:
  group: production-deploy
  cancel-in-progress: false

jobs:
  test-and-deploy:
    name: Test and Deploy to Production
    runs-on: ubuntu-latest
    environment:
      name: production
    permissions:
      contents: write
      issues: write
      pull-requests: write

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: athletemetrics_test
          POSTGRES_MAX_CONNECTIONS: 100
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Run TypeScript type check
        run: npm run check

      - name: Generate test credentials
        run: |
          TEST_PASS="$(openssl rand -base64 12)Aa1!"
          echo "ADMIN_PASSWORD=${TEST_PASS}" >> "$GITHUB_ENV"
          echo "‚úÖ Generated secure test credentials"

      - name: Setup test database schema
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/athletemetrics_test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/athletemetrics_test
          SESSION_SECRET: test-secret-key-for-ci
          ADMIN_USER: admin
          ADMIN_EMAIL: admin@test.com
          ADMIN_PASSWORD: ${{ env.ADMIN_PASSWORD }}

      - name: Run security audit
        id: security-audit
        run: ./scripts/security-audit.sh

      - name: Handle security audit failure
        if: failure() && steps.security-audit.outcome == 'failure'
        run: |
          echo "‚ùå Security audit failed - deployment BLOCKED"
          echo ""
          echo "üîß To resolve:"
          echo "1. Review audit results above"
          echo "2. Update vulnerable dependencies: npm audit fix"
          echo "3. For vulnerabilities without fixes, review alternatives"
          echo "4. Re-run workflow after fixes are committed"
          exit 1

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not created"
            exit 1
          fi
          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi
          echo "‚úÖ Build verification successful"

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Install PostgreSQL 17 client tools
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg

          # Verify GPG key fingerprint with exact matching to prevent partial match attacks
          FINGERPRINT=$(sudo gpg --no-default-keyring --keyring /etc/apt/trusted.gpg.d/postgresql.gpg --fingerprint ACCC4CF8 2>/dev/null | grep -A1 "pub" | tail -n1 | tr -d ' ')
          EXPECTED="B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8"
          if [ "$FINGERPRINT" != "$EXPECTED" ]; then
            echo "‚ùå PostgreSQL GPG key fingerprint verification failed"
            echo "Expected: $EXPECTED"
            echo "Got: $FINGERPRINT"
            exit 1
          fi
          echo "‚úÖ PostgreSQL GPG key fingerprint verified"

          sudo apt-get update
          sudo apt-get install -y postgresql-client-17
          # Update alternatives to use PostgreSQL 17 by default
          sudo update-alternatives --install /usr/bin/pg_dump pg_dump /usr/lib/postgresql/17/bin/pg_dump 100
          sudo update-alternatives --install /usr/bin/pg_restore pg_restore /usr/lib/postgresql/17/bin/pg_restore 100
          # Verify version
          pg_dump --version

      - name: Backup production database
        run: node scripts/backup-database.js
        env:
          USE_RAILWAY_BACKUPS: false
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}
          PUBLIC_DATABASE_URL: ${{ secrets.RAILWAY_PRODUCTION_PUBLIC_DATABASE_URL }}
          BACKUP_RETENTION_DAYS: 30

      # NOTE: Backup artifacts are NOT uploaded to GitHub Actions for security reasons.
      # Production backups contain sensitive data and should not be stored in GitHub.
      # Access backups via Railway CLI: railway run --service <SERVICE_ID> ls backups/
      # See docs/database-migration-rollback.md for backup access procedures

      - name: Validate database migrations
        run: |
          echo "üîç Validating migrations for safety..."
          npm run db:validate
          echo "‚úÖ Migration validation passed"

      - name: Run database migrations
        timeout-minutes: 30
        id: migrate
        run: |
          echo "üîÑ Running database migrations BEFORE deployment..."
          echo "‚ö†Ô∏è  CRITICAL: Migrations must complete before deploying new code"
          npm run db:migrate
          echo "‚úÖ Migrations completed successfully"
        env:
          DATABASE_URL: ${{ secrets.RAILWAY_PRODUCTION_PUBLIC_DATABASE_URL }}

      - name: Handle migration failure
        if: failure() && steps.migrate.outcome == 'failure'
        run: |
          echo "‚ùå Migration failed - deployment BLOCKED"
          echo ""
          echo "‚ö†Ô∏è  Manual intervention required:"
          echo "1. Check Railway logs for migration errors"
          echo "2. Restore database from backup if needed"
          echo "3. Review migration files for issues"
          echo ""
          echo "See docs/database-migration-rollback.md for detailed procedures"
          exit 1

      - name: Deploy to Railway Production
        if: steps.migrate.outcome == 'success'
        id: deploy
        run: |
          echo "üöÄ Deploying to Railway Production..."

          # Capture current deployment ID for potential rollback (BEFORE deploying)
          CURRENT_DEPLOYMENT=$(railway deployments list --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} --json | jq -r '.data[0].id' || echo "")
          echo "current_deployment_id=$CURRENT_DEPLOYMENT" >> "$GITHUB_OUTPUT"
          echo "üìù Current deployment (pre-deploy): $CURRENT_DEPLOYMENT"

          # Deploy the application (migrations already applied above)
          railway up --service ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }} --environment production --detach

          echo "‚úÖ Deployment initiated"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}

      - name: Wait for Railway deployment
        run: node scripts/wait-for-deployment.js
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          RAILWAY_SERVICE_ID: ${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}
          DEPLOYMENT_POLL_INTERVAL: 5
          DEPLOYMENT_TIMEOUT: 300

      - name: Run health check
        id: health-check
        run: node scripts/health-check.js
        env:
          HEALTH_CHECK_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TIMEOUT: 60000
          HEALTH_CHECK_RETRIES: 5
        continue-on-error: true

      - name: Run smoke tests
        id: smoke-tests
        if: steps.health-check.outcome == 'success'
        run: node scripts/smoke-tests.js
        env:
          BASE_URL: ${{ secrets.PRODUCTION_URL }}
        continue-on-error: true

      - name: Automated rollback on failure
        if: steps.health-check.outcome == 'failure' || steps.smoke-tests.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è Health check or smoke tests failed!"
          echo "üîÑ Initiating automated rollback..."

          PREVIOUS_DEPLOYMENT="${{ steps.deploy.outputs.current_deployment_id }}"

          if [ -n "$PREVIOUS_DEPLOYMENT" ] && [ "$PREVIOUS_DEPLOYMENT" != "null" ]; then
            echo "üìù Previous deployment: $PREVIOUS_DEPLOYMENT"
            echo ""
            echo "‚ö†Ô∏è  AUTOMATED ROLLBACK NOT AVAILABLE"
            echo "Railway CLI v3 does not support programmatic rollback to specific deployment IDs."
            echo ""
            echo "üîß MANUAL ROLLBACK REQUIRED:"
            echo "1. Go to Railway Dashboard: https://railway.app"
            echo "2. Navigate to your production service"
            echo "3. Find deployment: $PREVIOUS_DEPLOYMENT"
            echo "4. Click the three dots (...) and select 'Rollback'"
            echo "5. Confirm the rollback"
            echo ""
            echo "üìä Deployment Health Status:"
            echo "   - Health Check: ${{ steps.health-check.outcome }}"
            echo "   - Smoke Tests: ${{ steps.smoke-tests.outcome }}"
            echo ""
          else
            echo "‚ö†Ô∏è No previous deployment found"
            echo "üîß Manual intervention required."
            echo "Railway Dashboard: https://railway.app"
          fi

          exit 1
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
          HEALTH_CHECK_URL: ${{ secrets.PRODUCTION_URL }}
          HEALTH_CHECK_TIMEOUT: 30000
          HEALTH_CHECK_RETRIES: 3

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"
          echo "Deployment completed at: $(date)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Release: ${{ github.event.release.tag_name }}"
          echo "Check the logs above for details."
          exit 1

      - name: Post deployment comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const release = context.payload.release;
            const healthCheck = '${{ steps.health-check.outcome }}';
            const smokeTests = '${{ steps.smoke-tests.outcome }}';
            const rollbackAttempted = (healthCheck === 'failure' || smokeTests === 'failure');

            let body = `## üöÄ Production Deployment ${status === 'success' ? '‚úÖ' : '‚ùå'}\n\n`;
            body += `**Release:** ${release.tag_name}\n`;
            body += `**URL:** ${{ secrets.PRODUCTION_URL }}\n`;
            body += `**Health Check:** ${healthCheck === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n`;
            body += `**Smoke Tests:** ${smokeTests === 'success' ? '‚úÖ Passed' : smokeTests === 'skipped' ? '‚è≠Ô∏è Skipped' : '‚ùå Failed'}\n`;
            body += `**Final Status:** ${status}\n`;

            if (rollbackAttempted) {
              body += `\n### üîÑ Automated Rollback\n`;
              body += `Deployment health checks failed. Automated rollback was initiated.\n`;
              body += `Previous deployment was restored to maintain service stability.\n`;
              body += `\n**Action Required:** Investigate failure and retry deployment.\n`;
            } else if (status !== 'success') {
              body += `\n‚ö†Ô∏è Deployment failed before health checks. No rollback performed.\n`;
              body += `Check Railway dashboard: https://railway.app/project/${{ secrets.RAILWAY_PRODUCTION_SERVICE_ID }}\n`;
            } else {
              body += `\n‚úÖ Deployment completed successfully with all checks passing.\n`;
            }

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: body
            });
