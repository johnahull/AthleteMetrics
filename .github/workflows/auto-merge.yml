name: Auto-Merge PR

on:
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    # Only run if auto-merge is enabled via environment variable
    if: |
      github.event.review.state == 'approved' ||
      github.event.check_suite.conclusion == 'success'

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if PR is ready for auto-merge
        id: merge-check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get PR number from event
          if [ "${{ github.event_name }}" = "pull_request_review" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            # Find PR associated with this commit
            PR_NUMBER=$(gh pr list --state open --json number,headRefOid --jq ".[] | select(.headRefOid==\"${{ github.event.check_suite.head_sha || github.sha }}\") | .number" | head -1)
          fi

          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found, skipping auto-merge"
            echo "should_merge=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

          # Get PR details
          PR_DATA=$(gh pr view $PR_NUMBER --json reviewDecision,mergeable,statusCheckRollup,files,additions,deletions)

          # Extract data
          REVIEW_DECISION=$(echo "$PR_DATA" | jq -r '.reviewDecision')
          MERGEABLE=$(echo "$PR_DATA" | jq -r '.mergeable')
          FILES_COUNT=$(echo "$PR_DATA" | jq '.files | length')
          ADDITIONS=$(echo "$PR_DATA" | jq -r '.additions')
          DELETIONS=$(echo "$PR_DATA" | jq -r '.deletions')
          TOTAL_CHANGES=$((ADDITIONS + DELETIONS))

          # Check status checks
          STATUS_CHECKS=$(echo "$PR_DATA" | jq -r '.statusCheckRollup[] | select(.conclusion != "SUCCESS" and .conclusion != "NEUTRAL") | .name')

          # Safety checks
          SAFETY_PASS=true
          SAFETY_REASON=""

          # Check 1: Size limit (500 lines)
          if [ "$TOTAL_CHANGES" -gt 500 ]; then
            SAFETY_PASS=false
            SAFETY_REASON="PR too large ($TOTAL_CHANGES lines changed, max 500)"
          fi

          # Check 2: Files that require human review
          SENSITIVE_FILES=$(echo "$PR_DATA" | jq -r '.files[].path' | grep -E '(shared/schema\.ts|server/db\.ts|server/auth/|\.env|package\.json|drizzle\.config\.ts|\.github/workflows/)' || true)
          if [ -n "$SENSITIVE_FILES" ]; then
            SAFETY_PASS=false
            SAFETY_REASON="Contains security-sensitive files: $(echo "$SENSITIVE_FILES" | tr '\n' ', ')"
          fi

          # Check 3: Review decision
          if [ "$REVIEW_DECISION" != "APPROVED" ]; then
            echo "should_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Not approved (status: $REVIEW_DECISION)" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check 4: Mergeable state
          if [ "$MERGEABLE" != "MERGEABLE" ]; then
            echo "should_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Not in mergeable state (status: $MERGEABLE)" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check 5: Status checks
          if [ -n "$STATUS_CHECKS" ]; then
            echo "should_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Failing checks: $STATUS_CHECKS" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check 6: Safety checks
          if [ "$SAFETY_PASS" = "false" ]; then
            echo "should_merge=false" >> $GITHUB_OUTPUT
            echo "reason=$SAFETY_REASON" >> $GITHUB_OUTPUT

            # Comment on PR about why auto-merge is blocked
            printf -v COMMENT_BODY "## üîí Auto-Merge Blocked\n\n**Reason**: %s\n\nThis PR requires human review and manual merge for safety.\n\n**Current Status**:\n- ‚úÖ Code review: Approved\n- ‚úÖ CI checks: Passing\n- ‚ö†Ô∏è Safety check: **Requires human approval**\n\nPlease review and merge manually if appropriate." "${SAFETY_REASON}"
            gh pr comment "$PR_NUMBER" --body "$COMMENT_BODY"
            exit 0
          fi

          # All checks passed
          echo "should_merge=true" >> $GITHUB_OUTPUT

      - name: Auto-merge PR
        if: steps.merge-check.outputs.should_merge == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.merge-check.outputs.pr_number }}"

          # Comment before merging
          printf -v MERGE_COMMENT "## ‚úÖ Auto-Merge Initiated\n\nAll merge criteria met:\n- ‚úÖ Code review: Approved\n- ‚úÖ CI checks: Passing\n- ‚úÖ Safety checks: Passed\n- ‚úÖ No conflicts\n\nMerging with squash strategy..."
          gh pr comment "$PR_NUMBER" --body "$MERGE_COMMENT"

          # Perform squash merge
          gh pr merge $PR_NUMBER --squash --auto

          # Comment success
          echo "‚úÖ PR #$PR_NUMBER auto-merged successfully"

      - name: Comment if merge skipped
        if: steps.merge-check.outputs.should_merge == 'false' && steps.merge-check.outputs.reason != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.merge-check.outputs.pr_number }}"
          REASON="${{ steps.merge-check.outputs.reason }}"

          if [ -n "$PR_NUMBER" ]; then
            printf -v STATUS_COMMENT "## ‚ÑπÔ∏è Auto-Merge Status\n\n**Status**: Not ready for auto-merge\n\n**Reason**: %s\n\nThe PR will be eligible for auto-merge once all criteria are met." "$REASON"
            gh pr comment "$PR_NUMBER" --body "$STATUS_COMMENT"
          fi
