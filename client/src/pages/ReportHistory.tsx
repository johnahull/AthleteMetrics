/**
 * Report History Page
 * Shows all generated reports for an organization
 */

import React from "react";
import { useAuth } from "@/lib/auth";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Download, Share2, Trash2, FileText, Plus } from "lucide-react";
import { format } from "date-fns";
import { Link } from "wouter";

export function ReportHistory() {
  const { user, organizationContext } = useAuth();
  const queryClient = useQueryClient();

  // Fetch report history
  const { data: reports, isLoading, error } = useQuery({
    queryKey: ["reports", organizationContext],
    queryFn: async () => {
      if (!organizationContext) return [];
      console.log("Fetching reports for organization:", organizationContext);
      const res = await fetch(`/api/reports/organization/${organizationContext}`, {
        credentials: "include",
      });
      if (!res.ok) throw new Error("Failed to fetch reports");
      const data = await res.json();
      console.log("Reports fetched:", data);
      return data;
    },
    enabled: !!organizationContext,
  });

  console.log("Report History - organizationContext:", organizationContext);
  console.log("Report History - reports:", reports);
  console.log("Report History - isLoading:", isLoading);
  console.log("Report History - error:", error);

  // Delete report mutation
  const deleteReportMutation = useMutation({
    mutationFn: async (reportId: string) => {
      const res = await fetch(`/api/reports/${reportId}`, {
        method: "DELETE",
        credentials: "include",
      });
      if (!res.ok) throw new Error("Failed to delete report");
      return res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["reports", organizationContext] });
    },
  });

  const handleDownload = (reportId: string, title: string) => {
    window.open(`/api/reports/${reportId}/download`, "_blank");
  };

  const handleDelete = (reportId: string) => {
    if (confirm("Are you sure you want to delete this report?")) {
      deleteReportMutation.mutate(reportId);
    }
  };

  if (!user) {
    return <div className="p-6">Please log in to view report history.</div>;
  }

  return (
    <div className="container mx-auto p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold mb-2">Report History</h1>
          <p className="text-gray-600">View and manage your generated reports</p>
        </div>
        <Link href="/reports/builder">
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            New Report
          </Button>
        </Link>
      </div>

      {isLoading ? (
        <Card>
          <CardContent className="p-6">
            <div className="text-center text-gray-500">Loading reports...</div>
          </CardContent>
        </Card>
      ) : reports && reports.length > 0 ? (
        <Card>
          <CardHeader>
            <CardTitle>Generated Reports ({reports.length})</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Title</TableHead>
                  <TableHead>Type</TableHead>
                  <TableHead>Generated By</TableHead>
                  <TableHead>Date</TableHead>
                  <TableHead>Athletes/Teams</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {reports.map((report: any) => (
                  <TableRow key={report.id}>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <FileText className="h-4 w-4 text-gray-400" />
                        {report.title}
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        {report.reportType.replace("_", " ")}
                      </span>
                    </TableCell>
                    <TableCell>{report.generatedBy || "Unknown"}</TableCell>
                    <TableCell>
                      {format(new Date(report.createdAt), "MMM d, yyyy 'at' h:mm a")}
                    </TableCell>
                    <TableCell>
                      <div className="text-sm text-gray-600">
                        {report.athleteIds?.length > 0 &&
                          `${report.athleteIds.length} athlete(s)`}
                        {report.teamIds?.length > 0 && `${report.teamIds.length} team(s)`}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex justify-end gap-2">
                        {report.filePath ? (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDownload(report.id, report.title)}
                            title="Download PDF"
                          >
                            <Download className="h-4 w-4" />
                          </Button>
                        ) : (
                          <span className="text-xs text-gray-500 px-2">Web report</span>
                        )}
                        <Button
                          variant="ghost"
                          size="sm"
                          title="Share"
                          disabled
                        >
                          <Share2 className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDelete(report.id)}
                          title="Delete"
                          className="text-red-600 hover:text-red-700"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="p-12">
            <div className="text-center">
              <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Reports Yet</h3>
              <p className="text-gray-600 mb-4">
                Get started by creating your first report
              </p>
              <Link href="/reports/builder">
                <Button>
                  <Plus className="mr-2 h-4 w-4" />
                  Create Report
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

export default ReportHistory;